---

- name: check if gogs project {{ gogs_project_name }} exists
  shell: "{{ oc_location }} get project {{ gogs_project_name }}"
  register: gogs_project_result
  ignore_errors: true
  changed_when: false
  tags: gogs

- name: create gogs project {{ gogs_project_name }}
  shell: "{{ oc_location }} new-project {{ gogs_project_name }} --display-name='quarkusrobotshop-cicd' --description='quarkusrobotshop-cicd project'"
  when: gogs_project_result is failed
  tags: gogs

- name: assign user as project admin
  shell: "{{ oc_location }} adm policy add-role-to-user admin {{ project_admin }} -n {{ gogs_project_name }}"
  ignore_errors: true
  when:
    - gogs_project_result is failed
    - project_admin is defined
    - project_admin is not none
    - project_admin|trim() != ""
  tags: gogs

- name: annotate gogs project {{ gogs_project_name }}
  shell: "{{ oc_location }} annotate --overwrite namespace {{ gogs_project_name }} {{ project_annotations }}"
  ignore_errors: true
  when:
    - gogs_project_result is failed
    - project_annotations is defined
    - project_annotations is not none
    - project_annotations|trim() != ""
  tags: gogs

- name: check if gogs exists
  shell: "{{ oc_location }} get service {{ gogs_service_name }} -n {{ gogs_project_name }}"
  register: install_gogs
  ignore_errors: true
  changed_when: false
  tags: gogs

- name: remove existing gogs if clean deploy requested
  shell: |
    {{ oc_location }} delete all,cm,pvc -l app={{ gogs_service_name }} -n {{ gogs_project_name }}
    {{ oc_location }} delete sa {{ gogs_service_name }} -n {{ gogs_project_name }}
  when:
    - install_gogs is succeeded
    - gogs_clean_deploy|bool
  tags: gogs

- import_tasks: deploy_gogs.yml
  when: gogs_clean_deploy|bool or install_gogs is failed

- name: wait for gogs sign_up to be ready
  uri:
    url: http://{{ gogs_urlprefix }}.apps.{{ domain }}/user/sign_up
    status_code: 200
  register: result
  until: result.status == 200
  retries: 10
  delay: 30
  tags: gogs

- name: create gogs admin user
  uri:
    url: http://{{ gogs_urlprefix }}.apps.{{ domain }}/user/sign_up
    method: POST
    # yamllint disable-line rule:line-length
    body: "user_name={{ gogs_admin_user }}&password={{ gogs_admin_password }}&&retype={{ gogs_admin_password }}&&email={{ gogs_admin_user }}@gogs.com"
    headers:
      Content-Type: "application/x-www-form-urlencoded"
    status_code: 302,200
  tags: gogs

- name: check if user exists
  uri:
    url: http://{{ gogs_urlprefix }}.apps.{{ domain }}/api/v1/users/{{ gogs_user }}
    user: "{{ gogs_admin_user }}"
    password: "{{ gogs_admin_password }}"
    force_basic_auth: true
    status_code: 200,404
  register: user_result
  tags: gogs

- name: create gogs user
  uri:
    url: http://{{ gogs_urlprefix }}.apps.{{ domain }}/api/v1/admin/users
    method: POST
    # yamllint disable-line rule:line-length
    body: "{'login_name': '{{ gogs_user }}', 'username': '{{ gogs_user }}', 'email': '{{ gogs_user }}@gogs.com', 'password': '{{ gogs_user_password }}'}"
    body_format: json
    user: "{{ gogs_admin_user }}"
    password: "{{ gogs_admin_password }}"
    status_code: 200,201
    force_basic_auth: true
  when: user_result.status != 200
  tags: gogs

- name: generate gogs users
  uri:
    url: http://{{ gogs_urlprefix }}.apps.{{ domain }}/api/v1/admin/users
    method: POST
    body: "{'login_name': '{{ item }}', 'username': '{{ item }}', 'email': '{{ item }}@gogs.com', 'password': '{{ gogs_user_password }}'}"
    body_format: json
    user: "{{ gogs_admin_user }}"
    password: "{{ gogs_admin_password }}"
    status_code: 200,201
    force_basic_auth: true
  ignore_errors: true
  with_sequence: start=0 end={{ gogs_generate_user_count }} format="{{ user_format }}"
  when: gogs_generate_user_count|int >= 0
  tags: gogs

- name: Create Gogs API token
  uri:
    url: http://{{ gogs_urlprefix }}.apps.{{ domain }}/api/v1/users/builder/tokens
    method: POST
    headers:
      Content-Type: application/json
      Authorization: "Basic dXNlcjE6b3BlbnNoaWZ0"
    body_format: json
    body:
      name: user_token
    status_code: 201
  register: token_response
  ignore_errors: true
  tags: gogs

- set_fact:
    api_token: "{{ token_response.json.sha1 }}"
  ignore_errors: true
  tags: gogs

- include_tasks: gogs-load-repo.yml
  with_sequence: start={{ gogs_generate_user_count }} end={{ user_count_end }} format={{ user_format }}
  tags: gogs

- include_tasks: gogs-load-acm-repo.yml
  with_sequence: start={{ gogs_generate_user_count }} end={{ user_count_end }} format={{ user_format }}
  tags: gogs