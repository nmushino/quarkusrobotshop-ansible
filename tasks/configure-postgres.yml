---
- name: check if  project {{ project_namespace }} exists
  shell: "{{ oc_location }} get project {{ project_namespace }}"
  register: user_project
  ignore_errors: true
  changed_when: false
  tags:
    - postgres
    - acm-workload
    - helm

- name: create projects 
  command: "{{ oc_location }} adm new-project {{ project_namespace }}"
  when: user_project is failed
  ignore_errors: true 
  tags:
    - postgres
    - acm-workload
    - helm

- name:  Check if postgres-operator is running 
  shell: "{{ oc_location }} get pods  -n openshift-operators | grep Running | grep -E -o 'pgo-[0-9a-z][0-9a-z].*-[0-9a-z]{5}'"
  register: get_operator
  ignore_errors: yes
  args:
    executable: /bin/bash
  tags: 
    - postgres
    - acm-workload
    - helm

- fail: msg="Bailing out. this play requires 'postgres-operator to be running'"
  when:  "get_operator.rc == 1 and not delete_deployment|bool"
  tags: 
    - postgres
    - acm-workload
    - helm

- name: Saving postgres-operator Pod name
  set_fact:
    postgres_utils_pod: "{{ get_operator.stdout }}"
  when: not delete_deployment|bool
  tags: 
    - postgres
    - acm-workload
    - helm

- name: Copying over Postgres utils file
  template:
    src: templates/postgres-utils.yaml.j2
    dest:  "{{ config_location }}/postgres-utils.yaml"
    owner: "{{ default_owner }}"
    group: "{{ default_group }}"
    mode: 0666
  vars:
    target_project: "{{ project_namespace }}"
  when: not delete_deployment|bool
  tags: 
    - postgres
    - acm-workload
    - helm

#- name: Copying over pgadmin file
#  template:
#    src: templates/pgadmin.yaml.j2
#    dest:  "{{ config_location }}/pgadmin.yaml"
#    owner: "{{ default_owner }}"
#    group: "{{ default_group }}"
#    mode: 0666
#  when: not delete_deployment|bool

- name: Deploy Postgres utils
  command: "{{ oc_location }}  create -f {{ config_location }}/postgres-utils.yaml -n {{ project_namespace }}"
  ignore_errors: yes
  when: not delete_deployment|bool
  tags: 
    - postgres
    - acm-workload
    - helm

- name: Waiting for postgres-utilites to deploy
  shell: |
    set -o pipefail && {{ oc_location }} get pod  -n {{ project_namespace }} | grep -E 'postgres-utilites-[0-9a-z][0-9a-z].*-[0-9a-z]{5}' | grep Running  | wc -l
  register: postgres_build_complete
  when: not delete_deployment|bool
  until: "'1' in postgres_build_complete.stdout"
  retries: 100
  delay: 25
  args:
    executable: /bin/bash
  tags: 
    - postgres
    - acm-workload
    - helm

- name:  Get postgres-utilites Pod name
  shell: "{{ oc_location }} get pods  -n {{ project_namespace }} | grep Running | grep -E -o 'postgres-utilites-[0-9a-z][0-9a-z].*-[0-9a-z]{5}'"
  register: get_podname
  when: not delete_deployment|bool
  args:
    executable: /bin/bash
  tags: 
    - postgres
    - acm-workload
    - helm

- name: Saving  postgres-utilites Pod name
  set_fact:
    postgres_utils_pod: "{{ get_podname.stdout }}"
  when: not delete_deployment|bool
  tags: 
    - postgres
    - acm-workload
    - helm

- name:  Create and load postgres database
  command: "{{ oc_location }}  exec -i {{ postgres_utils_pod }} -n {{ project_namespace }}  -- /bin/init_postgres_db.sh"
  when: not delete_deployment|bool
  tags: 
    - postgres
    - acm-workload
    - helm

#- name: Deploy pgadmin
#  command: "{{ oc_location }}  create -f {{ config_location }}/pgadmin.yaml"
#  ignore_errors: yes
#  when: not delete_deployment|bool

#- name: Waiting for pgadmin to deploy
#  shell: |
#    set -o pipefail && {{ oc_location }} get pod  | grep -E 'crunchy-pgadmin4-[0-9a-z][0-9a-z].*-[0-9a-z]{5}' | grep Running  | wc -l
#  register: pgadmin_build_complete
#  when: not delete_deployment|bool
#  until: "'1' in pgadmin_build_complete.stdout"
#  retries: 100
#  delay: 25
#  args:
#    executable: /bin/bash

- name: Delete Postgres utils
  command: "{{ oc_location }}  delete -f {{ config_location }}/postgres-utils.yaml"
  ignore_errors: yes
  when: delete_deployment|bool
  tags: 
    - postgres
    - acm-workload
    - helm
#- name: Delete pgadmin
#  command: "{{ oc_location }}  delete -f {{ config_location }}/pgadmin.yaml"
#  ignore_errors: yes
#  when: delete_deployment|bool
  