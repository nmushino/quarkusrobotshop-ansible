#---
#- name: "create the quay project"
#  kubernetes.core.k8s:
#    state: present
#    name: "{{ quay_project_name }}"
#    kind: Project
#    api_version: project.openshift.io/v1
#  ignore_errors: true 
#  tags: quay
#
#- name: Create Quay Operator OperatorGroup
#  kubernetes.core.k8s:
#    state: present
#    namespace: "{{ quay_project_name }}"
#    definition: "{{ lookup('template', 'quay-SubscriptionGroup.yaml.j2') }}"
#  tags: quay
#
#- name: Retrieve Quay PackageManifest
#  kubernetes.core.k8s_info:
#    api_version: packages.operators.coreos.com/v1
#    kind: PackageManifest
#    name: quay-operator
#    namespace: "{{ quay_project_name }}"
#  register: quay_manifest
#  tags: quay
#
#- set_fact:
#    # yamllint disable-line rule:line-length
#    quay_csv: "{{ quay_manifest | json_query('resources[*].status.channels[?name==`' + quay_channel +'`].currentCSV') | first | first }}"
#  environment:
#    PYTHONPATH: "/usr/lib/python3.6/site-packages/jmespath"
#  tags: quay
#
#- name: Create Quay Operator Subscription
#  kubernetes.core.k8s:
#    state: present
#    namespace: "{{ quay_project_name }}"
#    definition:
#      apiVersion: operators.coreos.com/v1alpha1
#      kind: Subscription
#      metadata:
#        name: quay-operator
#        namespace: "{{ quay_project_name }}"
#      spec:
#        channel: "{{ quay_channel }}"
#        source: redhat-operators
#        sourceNamespace: openshift-marketplace
#        name: quay-operator
#        startingCSV: "{{ quay_csv }}"
#        installPlanApproval: Manual
#  tags: quay
#
#- name: Pause for 60 seconds for pods to download 
#  pause:
#    seconds: 60
#  tags: quay
#
#- name: wait for the status of the Quay subscription to not be empty
#  kubernetes.core.k8s_info:
#    api_version: operators.coreos.com/v1alpha1
#    kind: Subscription
#    name: quay-operator
#    namespace: "{{ quay_project_name }}"
#  register: operator_subscription_out
#  until:
#    - operator_subscription_out is defined
#    - operator_subscription_out.resources is defined
#    - operator_subscription_out.resources[0] is defined
#    - operator_subscription_out.resources[0].status is defined
#    - operator_subscription_out.resources[0].status.installplan is defined
#  retries: 30
#  delay: 15
#  tags: quay
#
#- name: patch the installplan to approve it
#  kubernetes.core.k8s:
#    definition:
#      apiVersion: operators.coreos.com/v1alpha1
#      kind: InstallPlan
#      metadata:
#        namespace: "{{ quay_project_name }}"
#        name: "{{ operator_subscription_out.resources[0].status.installplan.name }}"
#      spec:
#        approved: true
#  tags: quay
#
#- name: Get an existing LimitRanges
#  kubernetes.core.k8s_info:
#    api_version: v1
#    kind: LimitRange
#    namespace: "{{ quay_project_name }}"
#  register: quay_limit_ranges
#  tags: quay
#
#- name: Remove LimitRanges
#  kubernetes.core.k8s:
#    state: absent
#    api_version: v1
#    kind: LimitRange
#    namespace: "{{ item.metadata.namespace }}"
#    name: "{{ item.metadata.name }}"
#  loop: "{{ quay_limit_ranges.resources }}"
#  tags: quay
#
#- name: Check redhat pull secret
#  # yamllint disable-line rule:line-length
#  command: "{{ oc_location }} get secret redhat-pull-secret -n {{ quay_project_name }}"
#  register: redhat_pull_secret_check
#  ignore_errors: yes
#  tags: quay
#
#- name: create redhat pull secret
#  # yamllint disable-line rule:line-length
#  command:  "{{ oc_location }} -n {{ quay_project_name }} create secret docker-registry redhat-pull-secret --docker-server=quay.io  --docker-username='{{ quay_pull_user }}' --docker-password='{{ quay_pull_password }}'"
#  when: redhat_pull_secret_check.rc != 0
#  tags: quay
#
#- name: Check  quay admin password secret
#  # yamllint disable-line rule:line-length
#  command: "{{ oc_location }} get secret  quay-admin-password -n {{ quay_project_name }}"
#  register:  quay_admin_password_check
#  ignore_errors: yes
#  tags: quay
#
#- name: create quay admin password secret
#  # yamllint disable-line rule:line-length
#  command: "{{ oc_location }} -n {{ quay_project_name }} create secret generic quay-admin-password --from-literal=superuser-username={{ quay_admin_user }} --from-literal=superuser-password={{ quay_admin_password }} --from-literal=superuser-email=quay@example.com"
#  when: quay_admin_password_check.rc != 0
#  tags: quay
#
#- name: Deploy Quay Operator
#  kubernetes.core.k8s:
#    state: present
#    namespace: "{{ quay_project_name }}"
#    definition: "{{ lookup('file', 'quay_cr.yml') }}"
#  tags: quay
#
#- name: wait for quay to be running
#  uri:
#    url: https://{{ quay_urlprefix }}.apps.{{ domain }}
#    status_code: 200
#    validate_certs: false
#  register: result
#  until: result.status == 200
#  retries: 30
#  delay: 15
#  ignore_errors: true
#  tags: quay
#
#- name: Check  quay admin password secret
#  # yamllint disable-line rule:line-length
#  command: "{{ oc_location }} get secret  quay-auth-secret -n {{ development_project }}"
#  register:  quay_auth_secret_check
#  ignore_errors: yes
#  tags: quay
#
#- name: create docker secret for quay
#  # yamllint disable-line rule:line-length
#  command: "{{ oc_location }} create secret docker-registry quay-auth-secret --docker-server={{ quay_urlprefix }}.apps.{{ domain }} --docker-username={{ quay_admin_user }} --docker-password={{ quay_admin_password }} -n {{ development_project }}"
#  tags: quay
#
#- name: link secrets to service accounts
#  command: "{{ oc_location }} secrets link {{ item }} quay-auth-secret -n {{ development_project }}"
#  with_items:
#    - default
#    - builder
#  tags: quay
